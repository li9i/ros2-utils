# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# TABLE OF CONTENTS
# - HISTORY
# - PROMPT
# - ALIAS
# - COMPLETION
# - GIT
# -- git prompt (PS1)
# -- git-tree()
# -- git-multistatus()
# -- git-multirebase()
# -- git-is-local-synced-with-remote()
# - TMUX
# - VARIOUS
# -- httphere0()
# -- httphere1()
# -- grep_and_replace()
# -- find_and_rename()
# -- recently()
# -- function_info()
# - DOCKER
# -- docker_clean()
# -- docker_cleanall()
# -- docker_killall()
# -- docker_killall_robetarme()
# -- docker_ls()
# -- docker_volumes_remove()
# -- docker_reboot()
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# ==============================================================================
# If not running interactively, don't do anything
[ -z "$PS1" ] && return
# ==============================================================================
# HISTORY
# ==============================================================================
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# creates common bash history among multiple termninals
# Avoid duplicates
HISTCONTROL=ignoredups:erasedups
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
# ==============================================================================
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar
# ==============================================================================
# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# ==============================================================================
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi
# ==============================================================================
# Set up fzf key bindings and fuzzy completion
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# -m/--multi: multiple selection with <TAB>
export FZF_DEFAULT_OPTS="--multi"
# ==============================================================================
# PROMPT
# ==============================================================================
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

echo "----------------------------"
date
echo "----------------------------"

# Helps with pasting multi-line text into a terminal
bind 'set enable-bracketed-paste off'
# ==============================================================================
# ALIAS
# ==============================================================================
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias greprein='grep -rEIn'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ncal=' ncal -M -b'
# ------------------------------------------------------------------------------
# ls after cd: my absolute favorite
cd() { builtin cd "$@" && ls; }
cp() { rsync -ah --progress --info=progress2 "$@"; }
# ------------------------------------------------------------------------------
# Get the unix timestamp of now with nanosec resolution
alias unix_timestamp="date +'%s.%N'"
# Get unix timestamp updated in real time (sec resolution)
alias unix_timer="watch -n 1 date +%s"
# ------------------------------------------------------------------------------
#  --du       For each directory report its size as the accumulation of sizes of all
#             its files and sub-directories (and their files, and so on).
# -h          Print the size of each file but in a more human readable way
# -F          Append a `/' for directories, a `=' for socket files, a `*' for executable files
# -r          Sort the output in reverse order
# -c          Sort the output by last status change instead of alphabetically
# --dirsfirst
#             List directories before files
# --metafirst
#             Print the meta-data information at the beginning of the line rather
#             than after the indentation lines.
alias t="tree --du -h -F --dirsfirst --metafirst"
# ==============================================================================
# COMPLETION
# ==============================================================================
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
source /etc/bash_completion.d/git-prompt
# ------------------------------------------------------------------------------
bind 'set show-all-if-ambiguous on'
bind '"\e[Z":menu-complete-backward'
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
# https://superuser.com/a/1504199/1236116
bind 'set menu-complete-display-prefix on'
bind 'set colored-completion-prefix on'
bind 'set colored-stats on'
# ==============================================================================
# GIT
# ==============================================================================
export GIT_PS1_SHOWDIRTYSTATE=1

# --- START: Command Execution Time Prompt (Corrected) ---

# This is the command that PROMPT_COMMAND will execute.
# We need to know its name to ignore it in the DEBUG trap.
__prompt_command_func() {
  local threshold=0.050
  # If timer_start is set, a command was just executed.
  if [ -n "$timer_start" ]; then
    local timer_end=$(date +%s%N)
    local time_elapsed_ns=$((timer_end - timer_start))

    # Use LC_NUMERIC=C to force a "." decimal separator for printf and bc.
    local time_elapsed_s=$(LC_NUMERIC=C printf "%.2f" "${time_elapsed_ns}e-9")

    # Check if elapsed time is below threshold
    if (( $(echo "$time_elapsed_s < $threshold" | LC_NUMERIC=C bc -l) )); then
      RIGHT_PADDED_TIME=""
    else
      # Use bc for comparison, ensuring the locale is correct.
      if (( $(echo "$time_elapsed_s > 60" | LC_NUMERIC=C bc -l) )); then
        # Correctly calculate minutes and seconds for durations > 60s
        local minutes=$(echo "scale=0; $time_elapsed_s / 60" | LC_NUMERIC=C bc)
        local seconds=$(echo "$time_elapsed_s - ($minutes * 60)" | LC_NUMERIC=C bc -l)
        local seconds_fmt=$(LC_NUMERIC=C printf "%.2f" "$seconds")
        local seconds_dmt=$(LC_NUMERIC=C printf "%.0f" "$seconds")

        LAST_CMD_TIME="${minutes}m ${seconds_dmt}s"
      else
        LAST_CMD_TIME="${time_elapsed_s}s"
      fi

      local term_width=$(tput cols)
      RIGHT_PADDED_TIME=$(printf "%*s" "${term_width:-80}" "$LAST_CMD_TIME")
    fi
  else
    # No timer was started, so no command was run. Clear the time display.
    RIGHT_PADDED_TIME=""
  fi
  # Always reset timer_start for the next cycle.
  timer_start=""
}
PROMPT_COMMAND=__prompt_command_func

# The DEBUG trap. It runs BEFORE every command.
trap '
  # Start timer ONLY if BASH_COMMAND is not empty and not our prompt function.
  if [ -n "$BASH_COMMAND" ] && [ "$BASH_COMMAND" != "$PROMPT_COMMAND" ]; then
    timer_start=$(date +%s%N);
  fi' DEBUG


# --- Your PS1 Configuration ---

export GIT_PS1_SHOWDIRTYSTATE=1

# Define colors for git status
BPurple='\[\033[1;35m\]'
Green='\[\033[0;32m\]'
IRed='\[\033[0;91m\]'
Color_Off='\[\033[0m\]'

# 1. Define the LEFT part of your prompt
PS1_LEFT="\$(if [[ \$? == 0 ]]; then echo \"\[\033[0;94m\]\"; else echo \"\[\033[0;31m\]\"; fi)\342\226\210\342\226\210 \t | \D{%d-%m-%y} : \u@\h:\w "

# Your git status logic
PS1_LEFT+='$(git branch &>/dev/null;\
if [ $? -eq 0 ]; then \
	echo "$(echo `git status` | grep "# Your branch is"> /dev/null 2>&1; \
	if [ "$?" -eq "0" ]; then \
		echo "$(echo `git status` | grep "# Untracked files" > /dev/null 2>&1; \
		if [ "$?" -eq "0" ]; then \
			echo "'$BPurple'"$(__git_ps1 "(%s)**"); \
		else \
			echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
			if [ "$?" -eq "0" ]; then \
				echo "'$Green'"$(__git_ps1 "(%s)**"); \
			else \
				echo "'$IRed'"$(__git_ps1 "(%s)**"); \
			fi)  "; \
		fi)"; \
	else \
		echo "$(echo `git status` | grep "# Untracked files" > /dev/null 2>&1; \
		if [ "$?" -eq "0" ]; then \
			echo "'$BPurple'"$(__git_ps1 "(%s)"); \
		else \
			echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
			if [ "$?" -eq "0" ]; then \
				echo "'$Green'"$(__git_ps1 "(%s)"); \
			else \
				echo "'$IRed'"$(__git_ps1 "(%s)"); \
			fi)  "; \
		fi)"; \
	fi)" ;\
fi)'

# 2. Assemble the final PS1 using the carriage return trick
PS1="\n${Color_Off}\$RIGHT_PADDED_TIME\r${PS1_LEFT}${Color_Off}\n"
# ------------------------------------------------------------------------------
alias git-tree='git log --graph --pretty=oneline --all --abbrev-commit'
# ------------------------------------------------------------------------------
# Execute `git status` for multiple repositories under a single directory.
# Usage: git-multistatus <--https|-h|--ssh|-s> [--branch <value>] [-q|--quiet]
# ------------------------------------------------------------------------------
git-multistatus(){
  local branch="main"
  local show_status=false
  local ssh=true
  local branch_to_check=""
  local other_args=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -q|--quiet)
        show_status=false
        shift
        ;;
      -h|--https)
        ssh=false
        shift
        ;;
      -s|--ssh)
        ssh=true
        shift
        ;;
      --branch)
        if [[ -n "$2" ]]; then
          branch_to_check="$2"
          shift 2
        else
          echo "Error: --branch requires a branch name."
          return 1
        fi
        ;;
      *)
        # Store any other arguments to pass through
        other_args+=("$1")
        shift
        ;;
    esac
  done

  if [[ "$ssh" == true ]]; then
    git-multistatus-ssh "${other_args[@]}"
  else
    git-multistatus-https "${other_args[@]}"
  fi
}
# ------------------------------------------------------------------------------
git-multistatus-ssh()
{
    branch_to_check="main";
    show_status=true;
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -q|--quiet)
                show_status=false;
                shift
            ;;
            --branch)
                if [[ -n "$2" ]]; then
                    branch_to_check="$2";
                    shift 2;
                else
                    echo "Error: --branch requires a branch name.";
                    return 1;
                fi
            ;;
            *)
                echo "Unknown option: $1";
                return 1
            ;;
        esac;
    done;

    if [ "$show_status" = false ]; then
        echo "Checking branch $branch_to_check. Use -a to show individual changes";
    else
        echo "Checking branch $branch_to_check";
    fi;
    echo "---";
    REPO_DIR=".";
    max_width=0;
    repo_list=()

    for repo in "$REPO_DIR"/*/; do
        if [ -d "$repo/.git" ]; then
            repo_name=$(basename "${repo%/}")
            repo_list+=("$repo")
            (( ${#repo_name} > max_width )) && max_width=${#repo_name}
        fi
    done
    max_width=$((max_width + 2));

    export branch_to_check max_width show_status

    parallel --no-notice --jobs "$(nproc)" '
        repo="{}"
        repo_name=$(basename "${repo%/}")
        status=$(git -C "$repo" status --porcelain 2>/dev/null)

        sync_info=""
        if [[ -n $(echo "$status" | grep "^M") ]] || [[ -n $(echo "$status" | grep "^ M") ]]; then
            color="\e[31m"
            check_sync=1
            show_status_flag=true
        else
            if [[ -z "$status" ]]; then
                color="\e[32m"
                check_sync=1
                show_status_flag=false
            else
                color="\e[31m"
                check_sync=1
                show_status_flag=true
            fi
        fi

        output=""
        output+="$(printf "${color}%-${max_width}s\e[0m" "$repo_name")"

        if [ "$check_sync" -eq 1 ]; then
            sync_output=$(git-is-local-synced-with-remote "$branch_to_check" "$repo")
            output+=" $sync_output"
        fi

        echo -e "$output"

        if [[ "$show_status" == true && "$show_status_flag" == true ]]; then
            echo "-----------------------------------------------------------------------------"
            echo "Git status for: $repo_name"
            git -C "$repo" status
            echo "—————————————————————————————————————————————————————————————————————————————"
        fi
    ' ::: "${repo_list[@]}"
}
# ------------------------------------------------------------------------------
git-multistatus-https()
{
    branch_to_check="main";
    show_status=true;
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -q|--quiet)
                show_status=false;
                shift
            ;;
            --branch)
                if [[ -n "$2" ]]; then
                    branch_to_check="$2";
                    shift 2;
                else
                    echo "Error: --branch requires a branch name.";
                    return 1;
                fi
            ;;
            *)
                echo "Unknown option: $1";
                return 1
            ;;
        esac;
    done;

    if [ "$show_status" = false ]; then
        echo "Checking branch $branch_to_check. Use -a to show individual changes";
    else
        echo "Checking branch $branch_to_check";
    fi;
    echo "---";
    REPO_DIR=".";
    max_width=0;

    for repo in "$REPO_DIR"/*/; do
        if [ ! -d "$repo/.git" ]; then
            continue;
        fi;
        repo_name=$(basename "${repo%/}");
        (( ${#repo_name} > max_width )) && max_width=${#repo_name};
    done;
    max_width=$((max_width + 2));
    for repo in "$REPO_DIR"/*/; do
        if [ ! -d "$repo/.git" ]; then
            continue;
        fi;
        repo_name=$(basename "${repo%/}");
        status=$(git -C "$repo" status --porcelain 2>/dev/null);
        sync_info="";
        if [[ -n $(echo "$status" | grep '^M') ]] || [[ -n $(echo "$status" | grep '^ M') ]]; then
            color="\e[31m";
            check_sync=1;
            show_status_flag=true;
        else
            if [[ -z "$status" ]]; then
                color="\e[32m";
                check_sync=1;
                show_status_flag=false;
            else
                color="\e[31m";
                check_sync=1;
                show_status_flag=true;
            fi;
        fi;
        printf "${color}%-${max_width}s\e[0m" "$repo_name";
        if [ "$check_sync" -eq 1 ]; then
            sync_output=$(git-is-local-synced-with-remote "$branch_to_check" "$repo");
            echo -e "$sync_output";
        fi;
        if [[ "$show_status" == true && "$show_status_flag" == true ]]; then
            echo "-----------------------------------------------------------------------------";
            echo "Git status for: $repo_name";
            git -C "$repo" status;
            echo "—————————————————————————————————————————————————————————————————————————————";
        fi;
    done
}
# ------------------------------------------------------------------------------
git-is-local-synced-with-remote() {
  local branch="$1"
  local repo_dir="$2"

  if [[ -z "$branch" ]]; then
    echo "Usage: branch_sync <branch_name> [<repo_directory>]"
    return 1
  fi

  # Check if repo_dir is provided and is a valid directory
  if [[ -n "$repo_dir" && ! -d "$repo_dir" ]]; then
    echo "Error: '$repo_dir' is not a valid directory."
    return 1
  fi

  # Use the provided repo_dir or assume the current directory
  local git_dir
  if [[ -n "$repo_dir" ]]; then
      git_dir="$repo_dir"
  else
      git_dir="." # Current directory
  fi

  # Check if it's a git repository (inside the given directory or current dir)
  if ! command -v git &> /dev/null || ! git -C "$git_dir" rev-parse --is-inside-work-tree &> /dev/null; then
    echo "Error: Not a Git repository (in $git_dir)."
    return 1
  fi


  # Check if the branch exists locally
  if ! git -C "$git_dir" show-ref --verify "refs/heads/$branch" > /dev/null; then
    echo "Branch '$branch' does not exist locally."
    return 1
  fi

  # Check if the remote tracking branch exists
  if ! git -C "$git_dir" show-ref --verify "refs/remotes/origin/$branch" > /dev/null; then
      echo "Remote branch 'origin/$branch' does not exist."
      return 1
  fi


  # Get the SHA-1 hash of the local branch
  local local_sha=$(git -C "$git_dir" rev-parse "refs/heads/$branch")

  # Get the SHA-1 hash of the remote tracking branch
  git -C "$git_dir" fetch origin &> /dev/null
  local remote_sha=$(git -C "$git_dir" rev-parse "refs/remotes/origin/$branch")

  # Define colors
  GREEN='\033[0;32m'
  RED='\033[0;31m'
  YELLOW='\033[0;33m'
  NC='\033[0m'  # No Color (reset)

  # Compare the SHA-1 hashes
  if [[ "$local_sha" == "$remote_sha" ]]; then
    echo -e "  ${NC}Branch '$branch' is up to date with origin/$branch${NC}"
    return 0  # Return 0 for success (aligned)
  else
    # Determine which is older
    local local_commit_time=$(git -C "$git_dir" show -s --format=%ci "$local_sha")
    local remote_commit_time=$(git -C "$git_dir" show -s --format=%ci "$remote_sha")

    local_epoch=$(date -d "$local_commit_time" +%s)
    remote_epoch=$(date -d "$remote_commit_time" +%s)

    local_or_remote=""
    if [[ "$local_epoch" -lt "$remote_epoch" ]]; then
      local_or_remote="(local is behind)"
    elif [[ "$remote_epoch" -lt "$local_epoch" ]]; then
      local_or_remote="(remote is behind)"
    else
      local_or_remote="(same age but different history)" # Should be rare, but covers divergent histories
    fi

    echo -e "  ${YELLOW}Branch '$branch' is NOT up to date with origin/$branch ${local_or_remote}${NC}"
    return 1  # Return 1 for failure (not aligned)
  fi
}
export -f git-is-local-synced-with-remote
# ------------------------------------------------------------------------------
# Execute `git rebase origin/<branch>` for multiple repositories under a single directory.
# Usage: git-multirebase [--branch <value>]
# ------------------------------------------------------------------------------
git-multirebase ()
{
    branch_to_rebase="main";
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --branch)
                branch_to_rebase="$2";
                shift 2;
                ;;
            *)
                echo "Unknown argument: $1";
                exit 1;
                ;;
        esac
    done;

    echo "Rebasing branch $branch_to_rebase in all repositories";
    echo "---";
    REPO_DIR=".";
    max_width=0;
    for repo in "$REPO_DIR"/*/;
    do
        if [ ! -d "$repo/.git" ]; then
            continue;
        fi;
        repo_name=$(basename "${repo%/}");
        (( ${#repo_name} > max_width )) && max_width=${#repo_name};
    done;
    max_width=$((max_width + 2));
    for repo in "$REPO_DIR"/*/;
    do
        if [ ! -d "$repo/.git" ]; then
            continue;
        fi;
        repo_name=$(basename "${repo%/}");
        output=$(git -C "$repo" fetch origin 2>&1 && git -C "$repo" rebase "origin/$branch_to_rebase" 2>&1)
        rebase_status=$?

        if [ $rebase_status -ne 0 ]; then
            color="\e[31m" # Red for failure
        else
            color="\e[32m" # Green for success
        fi;

        printf "${color}%-${max_width}s\e[0m %s\n" "$repo_name" "$output"
    done;
}
# ------------------------------------------------------------------------------
# git status anywhere in a repo and list all changed files relative to pwd
# ------------------------------------------------------------------------------
gitstfiles() {
  local repo_root current_dir
  repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || { echo "Not in a Git repo"; return 1; }
  current_dir=$(pwd)

  git status --porcelain | awk '{print $2}' | while read -r path; do
    python3 -c "import os; print(os.path.relpath(os.path.join('$repo_root', '$path'), '$current_dir'))"
  done
}
# ==============================================================================
# colcon
# ==============================================================================
# To use clang one must have already installed
#   clang
#   libstdc++-12-dev # For ubuntu 22.04
export CXX=clang++
export CC=clang
# ==============================================================================
# List installed packages in chronological order (ascending)
# ==============================================================================
lsi(){
  zcat /var/log/dpkg.log* 2>/dev/null | grep " install " | awk '{print $1, $2, $4}' | sort
}
# ==============================================================================
# http-server - Quickly spin up a simple HTTP server for a directory.
#
# This is basically just a simple wrapper script for python's http.server;
# https://docs.python.org/3/library/http.server.html
# ==============================================================================
httphere0(){

  script="$(basename "$0")"

  # Function to display help
  display_help() {
      echo "$script - Quickly spin up a simple HTTP server for a directory."
      echo "Usage: $script [arguments]"
      echo
      echo "  -h/--help - Print help and exit."
      echo "  -p/--port - Set the port number to bind to (defaults to 10337)."
      echo "  -d/--directory - Set the root directory to serve from (defaults to current)."
      exit 0
  }

  # Parse arguments
  while [[ $# -gt 0 ]]; do
      case "$1" in
          -h|--help)
              display_help
              ;;
          -p|--port)
              port="$2"
              shift
              ;;
          -d|--directory)
              directory="$2"
              shift
              ;;
          *)
              echo "Unknown option: $1"
              display_help
              ;;
      esac
      shift
  done

  # Set default values
  port=${port:-10337}
  directory=${directory:-$(pwd)}

  # Check if the port is below 1024 and warn the user
  if [[ $port -lt 1024 ]]; then
      echo "Warning: Ports below 1024 require root privileges."
      echo "Please run this script with 'sudo' if you intend to use port $port."
      exit 1
  fi

  # Start the HTTP server
  ip=$(curl ifconfig.me/ip)
  echo "Serving HTTP on http://$ip:$port from directory [$directory]"
  python3 -m http.server --bind 0.0.0.0 --directory "$directory" "$port"
}
# ------------------------------------------------------------------------------
httphere1()
{
    script="$(basename "$0")";
    function display_help ()
    {
        echo "$script - Quickly spin up a simple HTTP server for a directory.";
        echo "Usage: $script [arguments]";
        echo;
        echo "  -h/--help - Print help and exit.";
        echo "  -p/--port - Set the port number to bind to (defaults to 10337).";
        echo "  -d/--directory - Set the root directory to serve from (defaults to current).";
        exit 0
    };
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h | --help)
                display_help
            ;;
            -p | --port)
                port="$2";
                shift
            ;;
            -d | --directory)
                directory="$2";
                shift
            ;;
            *)
                echo "Unknown option: $1";
                display_help
            ;;
        esac;
        shift;
    done;
    port=${port:-10337};
    directory=${directory:-$(pwd)};
    if [[ $port -lt 1024 ]]; then
        echo "Warning: Ports below 1024 require root privileges.";
        echo "Please run this script with 'sudo' if you intend to use port $port.";
        exit 1;
    fi;
    ip=$(curl ifconfig.me/ip);
    echo "Serving HTTP on http://$ip:$port from directory [$directory]";
    python3 - <<EOF
import os
import time
from http.server import SimpleHTTPRequestHandler, ThreadingHTTPServer

class CustomHTTPRequestHandler(SimpleHTTPRequestHandler):
    def list_directory(self, path):
        try:
            list = os.listdir(path)
        except OSError:
            self.send_error(404, "No permission to list directory")
            return None

        list.sort(key=lambda a: a.lower())

        def human_readable_size(size):
            for unit in ['bytes', 'KB', 'MB', 'GB', 'TB']:
                if size < 1024.0:
                    return f"{size:.2f} {unit}"
                size /= 1024.0
            return f"{size:.2f} PB"

        r = []
        r.append('<!DOCTYPE HTML>')
        r.append('<html><head>')
        r.append('<meta charset="utf-8">')
        r.append('<title>Directory listing for %s</title>' % self.path)
        r.append('<style>')
        r.append('table { width: 100%%; border-collapse: collapse; }')
        r.append('th, td { padding: 0px; text-align: left; }')
        r.append('th { background-color: #f4f4f4; }')
        r.append('</style>')
        r.append('</head><body>')
        r.append('<h1>Directory listing for %s</h1>' % self.path)
        r.append('<hr>')
        r.append('<table>')
        r.append('<tr><th>Name</th><th>Size</th><th>Last Modified</th></tr>')

        if self.path != '/':
            r.append('<tr><td><a href="..">Parent Directory</a></td><td></td><td></td></tr>')

        for name in list:
            fullname = os.path.join(path, name)
            displayname = name
            size = os.path.getsize(fullname)
            last_modified = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(os.path.getmtime(fullname)))

            if os.path.isdir(fullname):
                displayname = name + "/"
                r.append('<tr><td><a href="%s">%s</a></td><td>DIR</td><td>%s</td></tr>' % (displayname, displayname, last_modified))
            else:
                readable_size = human_readable_size(size)
                r.append('<tr><td><a href="%s">%s</a></td><td>%s</td><td>%s</td></tr>' % (displayname, displayname, readable_size, last_modified))

        r.append('</table>')
        r.append('<hr>')
        r.append('</body></html>')
        encoded = '\n'.join(r).encode('utf-8', 'surrogateescape')

        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.send_header("Content-Length", str(len(encoded)))
        self.end_headers()
        self.wfile.write(encoded)
        return None

if __name__ == '__main__':
    server_address = ('0.0.0.0', $port)
    httpd = ThreadingHTTPServer(server_address, CustomHTTPRequestHandler)
    print(f"Serving HTTP on http://$ip:$port from directory [$directory]")
    httpd.serve_forever()
EOF
}
# ------------------------------------------------------------------------------
# ==============================================================================
# Grep text and replace it
# Usage: replace_text [--dry-run] <search_pattern> <replacement_text>
# ==============================================================================
grep_and_replace() {
    local dry_run=0
    local args=()

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                dry_run=1
                shift
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done

    if [ ${#args[@]} -ne 2 ]; then
        echo "Usage: replace_text [--dry-run] <search_pattern> <replacement_text>"
        return 1
    fi

    local search_pattern="${args[0]}"
    local replacement_text="${args[1]}"

    # Use grep to find files containing the search pattern, excluding sensitive directories
    grep -rlF --exclude-dir=.git --exclude-dir=.svn --exclude-dir=.hg "$search_pattern" . | while read -r file; do
        if [ $dry_run -eq 1 ]; then
            echo "Dry run: Would replace '$search_pattern' with '$replacement_text' in '$file'"
        else
            sed -i "s|${search_pattern}|${replacement_text}|g" "$file"
            echo "Replaced '$search_pattern' with '$replacement_text' in '$file'"
        fi
    done
}
# ==============================================================================
# Find files with a certain name and rename them
# Usage: find_and_rename [--dry-run] <search_pattern> <new_name> [exclude_dirs...]
# ==============================================================================
find_and_rename() {
    local dry_run=0
    local args=()

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run)
                dry_run=1
                shift
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done

    if [ ${#args[@]} -lt 2 ]; then
        echo "Usage: find_and_rename [--dry-run] <search_pattern> <new_name> [exclude_dirs...]"
        return 1
    fi

    local search_pattern="${args[0]}"
    local new_name="${args[1]}"
    shift 2

    # Build the exclude path options for find
    local exclude_paths=()
    for dir in "${args[@]}"; do
        exclude_paths+=("-not" "-path" "*$dir/*")
    done

    # Use find to locate files matching the pattern, excluding specified directories
    find . -type f "${exclude_paths[@]}" -name "*$search_pattern*" | while read -r file; do
        local dir=$(dirname "$file")
        local base=$(basename "$file")
        local new_base="${base//$search_pattern/$new_name}"

        if [ $dry_run -eq 1 ]; then
            echo "Dry run: Would rename '$file' to '$dir/$new_base'"
        else
            mv "$file" "$dir/$new_base"
            echo "Renamed '$file' to '$dir/$new_base'"
        fi
    done
}
# ==============================================================================
# Find the n most recently modified files in a given directory
# ==============================================================================
recently() {
    local script="recently"
    local dir="${1:-$PWD}"  # Default to current directory
    local limit="${2:-10}"  # Default limit is 10
    shift 2  # Remove the first two arguments (dir and limit) from $@

    # Parse arguments
    local exclude_dirs=(".git")  # Default exclude .git directory
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                echo "$script - Recursively list the contents of a directory in modification order, most recent first."
                echo "Usage: $script [directory] [limit] [options]"
                echo
                echo "  directory - Directory to search in (default: \$PWD)."
                echo "  limit     - Maximum number of files to output (default: 10)."
                echo "  -h/--help - Print help and exit."
                echo "  -e/--exclude - Exclude a directory (default: .git is excluded)."
                return 0
                ;;
            -e|--exclude)
                exclude_dirs+=("$2")
                shift
                ;;
            *)
                echo "Unknown option: $1" >&2
                return 1
                ;;
        esac
        shift
    done

    # Determine which find command to use
    local find_cmd
    if command -v bfs &> /dev/null; then
        find_cmd="bfs"
        local extra_args=""
    else
        find_cmd="find"
        local extra_args=""
    fi

    # Build exclude arguments
    local exclude_args=()
    for path in "${exclude_dirs[@]}"; do
        path="$(realpath "$path" 2>/dev/null || echo "$dir/$path")"  # Resolve path or treat as relative
        if [[ "$path" != "$dir"/* ]]; then
            echo "$script: --exclude must specify a directory within the search directory ($dir)." >&2
            return 1
        fi
        path="$(echo "$path" | sed 's|^'"$dir"'/||')"
        exclude_args+=(-not \( -path "./$path/*" -prune \))
    done

    # Execute the find command
    local output
    output=$(
        $find_cmd "$dir" "${exclude_args[@]}" "$@" $extra_args -type f -printf '%T@ %p\n' |
        sort -k 1 -n |
        sed -E 's/^[^ ]+ //' |
        tac
    )

    # Apply limit
    echo "$output" | head -n "$limit"
}
# ==============================================================================
# Find function definition (-f) and location (-F)
# ==============================================================================
function_info(){
  shopt -s extdebug
  declare -F $1
  declare -f $1
}
# ==============================================================================
# DOCKER
# ==============================================================================
docker_clean(){

  # are any containers currently up?
  num_containers=$(docker container ls | wc -l)

  if [ $num_containers -gt 1 ]
  then
    echo "There are containers running, and I cannot remove them without killing them first. I will now just prune dangling images."
  else
    running_containers=$(docker ps -aq)

    if [ ! -z "$running_containers" ]
    then
      docker container stop $running_containers
      docker container rm  $running_containers
    fi
  fi

  # I don't want to enter `y` every time I call this function ([y/N])
  yes | docker image prune
}
# ------------------------------------------------------------------------------
docker_cleanall(){
  # I don't want to enter `y` every time I call this function ([y/N])
  yes | docker system prune
  # Remove volumes
  docker volume ls -f dangling=true | awk 'NR > 1 {print $2}' | xargs docker volume rm
}
# ------------------------------------------------------------------------------
docker_killall(){

  # are any containers currently running?
  num_containers=$(docker ps -aq | wc -l)

  if [ $num_containers -gt 0 ]
  then
    running_containers=$(docker ps -aq)
    docker container kill $running_containers
    docker container rm  $running_containers
    echo "Killed running containers"
  else
    echo "No containers are running"
  fi
}
# ------------------------------------------------------------------------------
docker_killall_by_label(){
  DOCKER_CONTAINERS_LABEL="$1"

  # Find the container id of all containers labeled with $DOCKER_CONTAINERS_LABEL
  CONTAINER_IDS=$(docker ps -q --filter "label=$DOCKER_CONTAINERS_LABEL")

  # Stop and remove all containers with the same label
  if [ -n "$CONTAINER_IDS" ]; then
    docker stop $CONTAINER_IDS
    docker rm   $CONTAINER_IDS
  fi
}
# ------------------------------------------------------------------------------
docker_ls(){

  # are any containers currently running?
  num_containers=$(docker ps -a | wc -l)

  if [ $num_containers -gt 1 ]
  then
    docker ps -q | xargs -n1 docker inspect --format '{{.Name}}'
  fi
}
# ------------------------------------------------------------------------------
docker_volumes_remove(){
  # https://stackoverflow.com/a/40654726/5297684
  docker volume rm $(docker volume ls -qf dangling=true)
}
docker_reboot(){
  sudo systemctl daemon-reload && sudo systemctl restart docker
}
# ==============================================================================
# ==============================================================================
# ==============================================================================
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# This function should reside at the end of this file (.bashrc)
# Automatically add completion for all aliases to commands having completion functions
# Source: https://superuser.com/a/437508/1236116
function alias_completion {
    local namespace="alias_completion"

    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0

    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

    local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"

    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words <<< "$alias_args"

        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
            if [[ -n "$completion_loader" ]]; then
                # force loading of completions for the aliased command
                eval "$completion_loader $alias_cmd"
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion="$(complete -p "$alias_cmd")"

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi

        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
}; alias_completion
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
